import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import sqlite3
import os

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# SQLite setup
conn = sqlite3.connect("tasks.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user TEXT,
    creator TEXT,
    text TEXT,
    deadline TEXT,
    completed INTEGER DEFAULT 0
)
''')
conn.commit()

# Define states
class TaskCreation(StatesGroup):
    ChoosingUser = State()
    EnteringText = State()
    ChoosingDeadline = State()
    EnteringDate = State()

user_map = {
    "muzalevskyim": "@muzalevskyim",
    "criypto_investor": "@criypto_investor"
}

@dp.message_handler(commands=["start", "help", "ping"])
async def send_welcome(message: types.Message):\n    await message.reply(f"Chat ID: {message.chat.id}")
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /–Ω–æ–≤–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. /–≥–æ—Ç–æ–≤–æ <id> ‚Äî —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.")

@dp.message_handler(commands=["–Ω–æ–≤–∞—è"])
async def new_task(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for key in user_map:
        keyboard.add(InlineKeyboardButton(text=user_map[key], callback_data=f"user_{key}"))
    await message.answer("–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=keyboard)
    await TaskCreation.ChoosingUser.set()

@dp.callback_query_handler(lambda c: c.data.startswith("user_"), state=TaskCreation.ChoosingUser)
async def process_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_key = callback_query.data.split("_")[1]
    await state.update_data(user=user_key, creator=callback_query.from_user.username)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await TaskCreation.Next()

@dp.message_handler(state=TaskCreation.EnteringText)
async def process_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="deadline_today"),
        InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="deadline_tomorrow"),
        InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="deadline_custom")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    await TaskCreation.Next()

@dp.callback_query_handler(lambda c: c.data.startswith("deadline_"), state=TaskCreation.ChoosingDeadline)
async def process_deadline(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "deadline_today":
        deadline = datetime.now().strftime("%Y-%m-%d")
    elif callback_query.data == "deadline_tomorrow":
        deadline = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    else:
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        await TaskCreation.Next()
        return
    await finalize_task(callback_query.from_user.id, state, deadline)

@dp.message_handler(state=TaskCreation.EnteringDate)
async def custom_deadline(message: types.Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text.strip(), "%Y-%m-%d").strftime("%Y-%m-%d")
        await finalize_task(message.from_user.id, state, deadline)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–ì–ì–ì–ì-–ú–ú-–î–î).")

async def finalize_task(user_id, state: FSMContext, deadline):
    data = await state.get_data()
    cursor.execute("INSERT INTO tasks (user, creator, text, deadline) VALUES (?, ?, ?, ?)",
                   (data['user'], data['creator'], data['text'], deadline))
    conn.commit()
    task_id = cursor.lastrowid
    assigned_user = user_map[data['user']]
    msg = f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {assigned_user}:

üìå {data['text']}
üóì –î–µ–¥–ª–∞–π–Ω: {deadline}
üÜî #{task_id}"
    await bot.send_message(CHAT_ID, msg)
    await bot.send_message(assigned_user, msg)
    await state.finish()

@dp.message_handler(lambda message: message.text.startswith("/–≥–æ—Ç–æ–≤–æ"))
async def complete_task(message: types.Message):
    try:
        task_id = int(message.text.split()[1])
        cursor.execute("SELECT text, user FROM tasks WHERE id=? AND completed=0", (task_id,))
        task = cursor.fetchone()
        if task:
            cursor.execute("UPDATE tasks SET completed=1 WHERE id=?", (task_id,))
            conn.commit()
            await bot.send_message(CHAT_ID, f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ @{message.from_user.username}:
üìå {task[0]}")
            await bot.send_message(user_map[task[1]], f"‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ @{message.from_user.username}:
üìå {task[0]}")
        else:
            await message.reply("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except:
        await message.reply("–§–æ—Ä–º–∞—Ç: /–≥–æ—Ç–æ–≤–æ <ID –∑–∞–¥–∞—á–∏>")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
scheduler = AsyncIOScheduler()

def check_deadlines():
    today = datetime.now().date()
    cursor.execute("SELECT id, text, user, deadline FROM tasks WHERE completed=0")
    for row in cursor.fetchall():
        task_id, text, user, deadline = row
        try:
            d_date = datetime.strptime(deadline, "%Y-%m-%d").date()
            if d_date == today:
                msg = f"‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ #{task_id}:
üìå {text}"
            elif d_date < today:
                msg = f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_id} (–¥–µ–¥–ª–∞–π–Ω {deadline}):
üìå {text}"
            else:
                continue
            bot.loop.create_task(bot.send_message(CHAT_ID, msg))
            bot.loop.create_task(bot.send_message(user_map[user], msg))
        except Exception as e:
            logging.error(f"Deadline check error: {e}")

scheduler.add_job(check_deadlines, "cron", hour=9)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)