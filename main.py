import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, BotCommand
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram.filters import Command
import sqlite3
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.environ["API_TOKEN"]
CHAT_ID = int(os.environ["CHAT_ID"])

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

conn = sqlite3.connect("tasks.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user TEXT,
    creator TEXT,
    text TEXT,
    deadline TEXT,
    completed INTEGER DEFAULT 0
)
''')
conn.commit()

class TaskCreation(StatesGroup):
    ChoosingUser = State()
    EnteringText = State()
    ChoosingDeadline = State()
    EnteringDate = State()

class TaskCompletion(StatesGroup):
    ChoosingTask = State()

user_map = {
    "muzalevskyim": {"chat_id": 514324714, "username": "@muzalevskyim"},
    "criypto_investor": {"chat_id": 767518219, "username": "@criypto_investor"},
    "Dmytryi_Muzalevskyi": {"chat_id": 893738240, "username": "@Dmytryi_Muzalevskyi"}
}

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(f"<b>Chat ID</b>: <code>{message.chat.id}</code>")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. /ready ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å. /mytasks ‚Äî –º–æ–∏ –∑–∞–¥–∞—á–∏.")

@dp.message(Command("new"))
async def new_task(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=info["username"], callback_data=f"user_{key}")]
        for key, info in user_map.items()
    ])
    await message.answer("–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=keyboard)
    await state.set_state(TaskCreation.ChoosingUser)

@dp.callback_query(F.data.startswith("user_"), TaskCreation.ChoosingUser)
async def process_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_key = callback_query.data.split("user_")[1]
    await state.update_data(user=user_key, creator=callback_query.from_user.username.lstrip("@"))
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskCreation.EnteringText)

@dp.message(TaskCreation.EnteringText)
async def process_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="deadline_today")],
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="deadline_tomorrow")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="deadline_custom")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(TaskCreation.ChoosingDeadline)

@dp.callback_query(F.data.startswith("deadline_"), TaskCreation.ChoosingDeadline)
async def process_deadline(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "deadline_today":
        deadline = datetime.now().strftime("%Y-%m-%d")
    elif callback_query.data == "deadline_tomorrow":
        deadline = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    else:
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):")
        await state.set_state(TaskCreation.EnteringDate)
        return
    await finalize_task(callback_query.from_user.username, state, deadline)

@dp.message(TaskCreation.EnteringDate)
async def custom_deadline(message: Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text.strip(), "%Y-%m-%d").strftime("%Y-%m-%d")
        await finalize_task(message.from_user.username, state, deadline)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–ì–ì–ì–ì-–ú–ú-–î–î).")

async def finalize_task(username, state: FSMContext, deadline):
    data = await state.get_data()
    user = data['user']
    creator = data['creator']
    text = data['text']
    cursor.execute("INSERT INTO tasks (user, creator, text, deadline) VALUES (?, ?, ?, ?)",
                   (user, creator, text, deadline))
    conn.commit()
    task_id = cursor.lastrowid

    assigned_user = user_map.get(user)
    if not assigned_user:
        await bot.send_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    msg = f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {assigned_user['username']}\nüìå {text}\nüìÖ –î–µ–¥–ª–∞–π–Ω: {deadline}\nüÜî #{task_id}"
    await bot.send_message(CHAT_ID, msg)
    await bot.send_message(assigned_user["chat_id"], msg)
    await state.clear()

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.start()

    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="new", description="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
        BotCommand(command="ready", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"),
        BotCommand(command="mytasks", description="–ú–æ–∏ –∑–∞–¥–∞—á–∏")
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
